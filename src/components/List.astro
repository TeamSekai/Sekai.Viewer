---
---

<div class="grid-container">
</div>

<div id="load-more" class="flex justify-center flex-row items-center">
	<div class="animate-spin h-10 w-10 border-4 border-blue-500 rounded-full border-t-transparent"></div>
	<h1 class="m-4 text-2xl" id="loading">Loading...</h1>
</div>

<style>
	.grid-container {
		display: grid;
		grid-auto-flow: column;
		max-width: 100vw;
		width: 100%;
		margin-inline: auto;
		gap: 10px;
		grid-auto-flow: dense;
		grid-template-columns: repeat(2, 1fr);
	}

	@media screen and (max-width: 768px) {
		.grid-container {
			grid-template-columns: repeat(1, 1fr);
		}
	}

	@media screen and (max-width: 480px) {
		.grid-container {
			grid-template-columns: repeat(1, 1fr);
		}
	}
</style>

<style is:global>
	.grid-child {
		margin: 0;
	}
	.grid-child img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.grid-child video {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.file-container {
		text-align: center;
		margin: 0;
		border: 2px solid #333;
	}
	.file-container a {
		color: #5ac76c;
	}
	.file-container a:hover {
		color: #398145;
	}
	.dir-container {
		text-align: center;
		margin: 0;
		padding: 0.65em;
		border: 2px solid #333;
	}
	.dir-container p {
		font-size: 1.45em;
	}
	.grid-child {
		margin: 0;
	}
	.grid-child img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.grid-child video {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.hideme {
		opacity: 0;
	}
</style>

<script>
	function delay(time){return new Promise((resolve)=>{setTimeout(resolve, time)})}
	console.log('Hello Sekai!')
	let offset = 0;
	let loading = false;

	async function UpdateLoadingInfo(str) {
		const elem = document.getElementById('loading')
		if (str) {
			elem.textContent = `Loading... (${str})`
		} else if (str === '') {
			elem.textContent = `Loading...`
		} else {
			elem.textContent = `Loading...`
		}
	}

	let one_mb_ms = 1000;
	async function Def_Speed() {
		const before = Date.now()
		await fetch('/1mb.txt')
		const after = Date.now()
		console.log(`Took ${after - before}ms`)
		one_mb_ms = after - before
	}

	function calcDelay(bytes) {
		const one_mb = 1024 * 1024;
		const mb = Number((bytes / one_mb).toFixed(2));
		console.log(`it may takes ${one_mb_ms * mb}ms (${mb})`)
		return one_mb_ms * mb;
	}

	function checkGridCoverage() {
		console.log('Called checker')
	    const gridContainer = document.querySelector('.grid-container');
	    const viewportWidth = window.innerWidth;
	    const viewportHeight = window.innerHeight;

	    // グリッドの幅と高さを取得
	    const gridWidth = gridContainer.clientWidth;
	    const gridHeight = gridContainer.clientHeight;

	    // 視覚的な空白率を計算
	    const horizontalGap = (viewportWidth - gridWidth) / viewportWidth * 100;
	    const verticalGap = (viewportHeight - gridHeight) / viewportHeight * 100;

	    // 空白率が一定以上の場合、グリッドが画面全体を埋めていないと判断
	    const threshold = 10; // 95%を目安としています

	    if (horizontalGap > threshold || verticalGap > threshold) {
	        console.log('画面全体がGridレイアウトで埋まれていません');
	        return true;
	    } else {
	        console.log('画面全体がGridレイアウトで埋まっています');
	        return false;
	    }
	}

	async function cdnfetch() {
		console.log('Fetching')
		loading = true;
		document.getElementById('load-more').classList.remove('hideme');
		try {
			const path = location.pathname
			const repl = path.replace(/\/$/, "")
			const apiurl = `https://cdn.ringoxd.dev/api/files${repl}/`
			const clienturl = `https://cdn.ringoxd.dev${repl}/`
			const res = await fetch(`${apiurl}?offset=${offset}`, {
				mode: 'cors'
			});
			const newItems = await res.json();
			const gridContainer = document.querySelector('.grid-container');
			
			const image_PreItems = [];
			const DirItems = [];
			const miscItems = [];
			const imageItems = [];
			const videoItems = [];

			newItems.forEach(file => {
				const ext = file.name.split('.').pop().toLowerCase();
				const newItem = document.createElement('div');
				newItem.classList.add('grid-child');
 
				if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'svg', 'webp'].includes(ext)) {
					image_PreItems.push(file)
				} else if (['mp4', 'webm', 'ogg', 'mov', 'mkv'].includes(ext)) {
					newItem.innerHTML = `<a href="${clienturl}${file.name}" class="link"><video src="${clienturl}${file.name}" controls preload="metadata"></video></a>`;
					videoItems.push(newItem);
				} else if (file.directory == true) {
					newItem.innerHTML = `<div class="dir-container"><a href="${repl}/${file.name}"><p>${file.name}(ディレクトリ)</p></a></div>`;
					miscItems.push(newItem);
				} else {
					newItem.innerHTML = `<div class="file-container"><a href="${clienturl}${file.name}" class="link"><p>${file.name}(ファイル - ${file.sizeStr})</p></a></div>`;
					DirItems.push(newItem);
				} 
			});
			for (const x of image_PreItems) {
				UpdateLoadingInfo(`Fetching ${x.name}[${x.sizeStr}]`)
				const newItem = document.createElement('div');
				newItem.classList.add('grid-child');
				newItem.innerHTML = `<a href="${clienturl}${x.name}" class="link"><img src="${clienturl}${x.name}" alt="image" /></a>`;
				imageItems.push(newItem);
				await delay(calcDelay(x.size))
			}


			DirItems.forEach(item => gridContainer.appendChild(item));
			miscItems.forEach(item => gridContainer.appendChild(item));
			imageItems.forEach(item => gridContainer.appendChild(item));
			/*
			for (const item of imageItems) {
				gridContainer.appendChild(item);
				await delay(500)
			}*/
			videoItems.forEach(item => gridContainer.appendChild(item));

			offset += 10;
		} catch (e) {
			console.error(e);
		} finally {
			loading = false;
			document.getElementById('load-more').classList.add('hideme');
		}
	}
	async function firstLoad() {
		await cdnfetch()
		let c = 0;
		while (c <= 5) {
			if (!checkGridCoverage) {
				await cdnfetch()
				c++;
			} else {
				break;
			}
		}
	}
	async function main() {
		console.log('Called')
		Def_Speed()
		await firstLoad()
		const loadMoreDiv = document.getElementById('load-more');
		const observer = new IntersectionObserver(async (entries) => {
			if (entries[0].isIntersecting && !loading) {
				await cdnfetch()
			}
		}, {
			rootMargin: '100px',
		});

		observer.observe(loadMoreDiv);
		}
	
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			main()
		});
	} else {
		main()
	}


</script>
