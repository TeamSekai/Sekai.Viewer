---
interface Props {

	dirpath: string;
}
const { dirpath } = Astro.props;
---

<div class="grid-container">
</div>

<div id="load-more"></div>

<style>
	.grid-container {
		display: grid;
		grid-auto-flow: column;
		max-width: 100vw;
		width: 100%;
		margin-inline: auto;
		gap: 10px;
		grid-auto-flow: dense;
		grid-template-columns: repeat(2, 1fr);
	}

	@media screen and (max-width: 768px) {
		.grid-container {
			grid-template-columns: repeat(1, 1fr);
		}
	}

	@media screen and (max-width: 480px) {
		.grid-container {
			grid-template-columns: repeat(1, 1fr);
		}
	}
</style>

<style is:global>
	.misc-container {
		margin: 20px;
	}
	.grid-child {
		margin: 0;
	}
	.grid-child img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.grid-child video {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.misc-container {
		margin: 20px;
	}
	.grid-child {
		margin: 0;
	}
	.grid-child img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
	.grid-child video {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
	}
</style>

<script>
	console.log('Called')
	let offset = 0;
	let loading = false;
	async function cdnfetch() {
		console.log('Fetching')
		loading = true;
		try {
			const path = location.pathname
			const repl = path.replace(/\/$/, "")
			console.log(repl)
			const apiurl = `https://cdn.ringoxd.dev/api/files${repl}/`
			const clienturl = `https://cdn.ringoxd.dev/${repl}`
			// const res = await fetch(`https://cdn.ringoxd.dev/api/files/${"${dirpath}".replace(/\/$/, "")}?offset=${offset}`, {
			const res = await fetch(`${apiurl}?offset=${offset}`, {
				mode: 'cors'
			});
			const newItems = await res.json();
			const gridContainer = document.querySelector('.grid-container');
			newItems.forEach(file => {
					console.log(file)
					console.log(file.name)
					const newItem = document.createElement('div');
					newItem.classList.add('grid-child');
					newItem.innerHTML = `
							${['png', 'jpg', 'jpeg', 'gif', 'bmp', 'svg'].includes(file.name.split('.').pop().toLowerCase()) ? `<a href="${clienturl}${file.name}" class="link"><img src=${clienturl}${file.name} alt="image" /></a>` : ''}
							${['mp4', 'webm', 'ogg'].includes(file.name.split('.').pop().toLowerCase()) ? `<a href="${clienturl}${file.name}" class="link"><video src=${clienturl}${file.name} controls preload="metadata"></video></a>` : ''}
							${!['png', 'jpg', 'jpeg', 'gif', 'bmp', 'svg'].includes(file.name.split('.').pop().toLowerCase()) && !['mp4', 'webm', 'ogg'].includes(file.name.split('.').pop().toLowerCase()) ? `<a href="${file.name}"><p>${file.name}</p></a>` : ''}
					`;
					gridContainer.appendChild(newItem);
				});
			offset += 10;
		} catch (e) {
			console.error(e);
		} finally {
			loading = false;
		}
	}
	async function main() {
		console.log('DOM Loaded')
		cdnfetch()
		const loadMoreDiv = document.getElementById('load-more');
		const observer = new IntersectionObserver(async (entries) => {
			if (entries[0].isIntersecting && !loading) {
				await cdnfetch()
			}
		}, {
			rootMargin: '100px',
		});

		observer.observe(loadMoreDiv);
		}
	
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			main()
		});
	} else {
		main()
	}
</script>